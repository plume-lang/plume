interface<Env, A, Ret> Closure1<Env, A, Ret> {
  fn apply1(env: Env, a: A): Ret
}

interface<Env, A, B, Ret> Closure2<Env, A, B, Ret> {
  fn apply2(env: Env, a: A, b: B): Ret
}

interface<Env, A, B, C, Ret> Closure3<Env, A, B, C, Ret> {
  fn apply3(env: Env, a: A, b: B, c: C): Ret
}

interface<Env, A, B, C, D, Ret> Closure4<Env, A, B, C, D, Ret> {
  fn apply4(env: Env, a: A, b: B, c: C, d: D): Ret
}

fn add(x: int) => fn(y: int) => x + y

// Would be converted to

type add_closure = int

extend Closure1<add_closure, int, int> {
  fn apply1(env: add_closure, y: int): int => env + y
}

extend Closure1<unit, int, add_closure> {
  fn apply1(_: unit, x: int): add_closure => x
}

x: add_closure = apply1(unit, 42)
y: int = apply1(x, 42)

println(y)