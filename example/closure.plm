native print<A>(x: A): int
native sub(x: int, y: int): int
native mul(x: int, y: int): int
native eq(x: int, y: int): bool
native add(x: int, y: int): int

facto(x: int) =>
  switch x 
    case 0 => 1
    case ? => mul(x, facto(sub(x, 1)))

print(facto(5))

ack(m: int, n: int) =>
  if eq(m, 0) then 
    return add(n, 1)
  else if eq(n, 0) then 
    return ack(sub(m, 1), 1)
  else 
    return ack(sub(m, 1), ack(m, sub(n, 1)))

print(ack(3, 6))

a = (x: int) => (y: int) => add(x, y)

print(a(3)(4))

property<A> A.show(): int

extend (c: int) with
  show(): int => print(c)

res = a(3)(9)
res.show()