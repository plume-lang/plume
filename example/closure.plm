native print<A>(x: A): int

println<A>(x: A): int =>
  print(x)
  print("\n")

type Option<A> =
  Some(A)
  None

extend<A> (c: Option<A>) with
  show(showHelper: (A) -> int): int => switch c
    case Some(x) => 
      print("Some(")
      x.showHelper()
      println(")")
    case None() => println("None")

extend (c: int) with
  show(): int => print(c)

x: Option<Option<int>> = Some(Some(9))

x.show((c) => c.show((c) => c.show()))