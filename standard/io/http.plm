require "std:datatypes/result"
require "async"
require "std:datatypes/map"
require "std:classes"

type Response {  }

fn to_header(m: Map<str>): str =>
  m.to_list().map(fn case (k, v) => "$k: $v").join_str("\r\n")

native "native" "std:native" {
  fetch(url: str): Result<str, str>
  create_server(port: int, message: Option<str>, callback: fn(Response): unit): unit
  respond(res: Response, body: str, status: int): unit
}

native "js" "std:native" fetch(url: str): async<Result<str, str>>

extend show<Response> {
  fn show_prec(_, _) => "Response"
}