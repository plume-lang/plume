require "bool"

native "std:native" {
  add_str(x: str, y: str): str
  mul_str(x: str, y: int): str
  string_length(x: str): int
  eq_string(x: str, y: str): bool
  get_index_str(x: str, i: int): Option<char>
  str_slice(x: str, start: int, end: int): str
}

extend numeric<str> {
  fn (+) (x: str, y: str) => add_str(x, y)
  fn (-) (x: str, y: str) => x
}

extend equality<str> {
  fn (==) (x: str, y: str) => eq_string(x, y)
}

extend show<str> {
  fn show(x: str) => "\"" + x + "\""
}

// Inserting a `sep`arator between each element of the list
// and concatenating the result into a single string.
fn join(c: [str], sep: str) =>
  switch c {
    case [] => ""
    case [x] => x
    case [x, ..xs] => x + sep + xs.join(sep)
  }


extend to_str<str> {
  fn to_str(x: str) => x
}