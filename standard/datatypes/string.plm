native "std:native" add_str(x: str, y: str): str
native "std:native" mul_str(x: str, y: int): str
native "std:native" to_string<A>(x: A): str
native "std:native" string_length(x: str): int
native "std:native" eq_string(x: str, y: str): bool
native "std:native" get_index_str(x: str, i: int): Option<char>
native "std:native" char_to_string(x: char): str
native "std:native" eq_char(x: char, y: char): bool
native "std:native" str_slice(x: str, start: int, end: int): str

extend (c: str) with
  operator + (d: str) => add_str(c, d)
  operator * (d: int) => mul_str(c, d)
  operator == (d: str) => eq_string(c, d)
  concat(d: str) => c + d
  show() => "\"{c}\""
  len() => string_length(c)

  get_index(i: int): Option<char> => get_index_str(c, i)
  slice(start: int, end: int): str => str_slice(c, start, end)
  
extend (c: [str]) with
  join(sep: str) =>
    switch c
      case [] => ""
      case [x] => x
      case [x, ..xs] => x + sep + xs.join(sep)

extend (c: char) with
  show() => "'{char_to_string(c)}'"
  to_str(): str => char_to_string(c)
  operator ==(d: char) => eq_char(c, d)