require "bool"

native "std:native" {
  add_str(x: str, y: str): str
  mul_str(x: str, y: int): str
  to_string<A>(x: A): str
  string_length(x: str): int
  eq_string(x: str, y: str): bool
  get_index_str(x: str, i: int): Option<char>
  str_slice(x: str, start: int, end: int): str
}

extend (c: str) {
  fn (+) (d: str) => add_str(c, d)
  fn (*) (d: int) => mul_str(c, d)
  fn concat(d: str) => c + d
  fn (==) (d: str) => eq_string(c, d)

  fn show() => "\"" + c + "\""
  fn len() => string_length(c)

  fn get_index(i: int): Option<char> => get_index_str(c, i)
  fn slice(start: int, end: int): str => str_slice(c, start, end)
}
  
extend (c: [str]) {
  fn join(sep: str) =>
    switch c {
      case [] => ""
      case [x] => x
      case [x, ..xs] => x + sep + xs.join(sep)
    }
}
