require "number"
require "tuple"

type Complex<A> { Complex(A, A) }

extend<A extends numeric> numeric<Complex<A>> {
  fn (+) (x: Complex<A>, y: Complex<A>): Complex<A> => switch (x, y) {
    case (Complex(a, b), Complex(c, d)) => Complex(a + c, b + d)
  }

  fn (-) (x: Complex<A>, y: Complex<A>): Complex<A> => switch (x, y) {
    case (Complex(a, b), Complex(c, d)) => Complex(a - c, b - d)
  }
}

extend<A extends product, A extends numeric> product<Complex<A>> {
  fn (*) (x: Complex<A>, y: Complex<A>): Complex<A> => switch (x, y) {
    case (Complex(a, b), Complex(c, d)) => 
      Complex(a * c - b * d, a * d + b * c)
  }

  fn (/) (x: Complex<A>, y: Complex<A>): Complex<A> => switch (x, y) {
    case (Complex(a, b), Complex(c, d)) => 
      Complex(
        (a * c + b * d) / (c * c + d * d), 
        (b * c - a * d) / (c * c + d * d)
      )
  }
  
  fn (^) (a: Complex<A>, b: int): Complex<A> => switch b {
    case 0 => switch a { case Complex(x, y) => Complex(x ^ 0, y) }
    case 1 => a
    case ? => a * (a ^ (b - 1))
  }
}

extend<A extends show> show<Complex<A>> {
  fn show (x: Complex<A>): str => switch x {
    case Complex(a, b) => show(a) + " + " + show(b) + "i"
  }
}

infixl 6 ++

fn (++)<A>(a: A, b: A): Complex<A> => Complex(a, b)