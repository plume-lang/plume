type Option<A> =
  None
  Some(A)

extend<A> (this: Option<A>) with
  map<B>(f: (A) -> B): Option<B> =>
    switch this
      case None => None
      case Some(a) => Some(f(a))

  show(showSome: (A) -> str): str =>
    switch this
      case None => "None"
      case Some(a) => "Some({a.showSome()})"
  
  flatMap<B>(f: (A) -> Option<B>): Option<B> =>
    switch this
      case None => None
      case Some(a) => f(a)

  getOrElse(f: () -> A): A =>
    switch this
      case None => f()
      case Some(a) => a
  
  isNone(): bool =>
    switch this
      case None => true
      case Some(?) => false
  
  isSome(): bool =>
    switch this
      case None => false
      case Some(?) => true