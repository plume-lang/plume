require "string"
require "std:classes"

type Option<T> {
  Some(T),
  None
}

// When the condition is true, the function is called and the result
// is wrapped in a Some.
fn when<A>(cond: bool, a: fn(): A): Option<A> =>
  if cond {
    return Some(a())
  } else {
    return None
  }

// When the condition is false, the function is called and the result
// is wrapped in a Some.
fn unless<A>(cond: bool, a: fn(): A): Option<A> =>
  if cond {
    return None
  } else {
    return Some(a())
  }

// Defining control flow constructrs
type Control<A> { 
  Return(A),
  Break,
  Continue
}

// Implementing a while loop using a recursive function and 
// the Control type.
fn while<A>(cond: fn(): bool, body: fn(): Control<A>): Option<A> =>
  if cond() {
    return switch body() {
      case Return(x) => Some(x)
      case Break => None
      case Continue => while(cond, body)
    }
  } else {
    return None
  }


extend<A extends show> show<Option<A>> {
  fn show_prec(o: Option<A>, prec: int): str => switch o {
    case Some(x) => "Some(" + x.show_prec(prec + 1) + ")"
    case None => "None"
  }
}

extend<A> boolean_algebra<Option<A>> {
  fn and(a: Option<A>, b: Option<A>): Option<A> => switch a {
    case Some(_) => b
    case None => None
  }

  fn or(a: Option<A>, b: Option<A>): Option<A> => switch a {
    case Some(_) => a
    case None => b
  }

  fn not(a: Option<A>): Option<A> => None
}

fn or_else<A>(a: Option<A>, b: A): A => switch a {
  case Some(x) => x
  case None => b
}

extend traversable<Option> {
  fn map<A, B>(a: Option<A>, f: fn(A): B): Option<B> => switch a {
    case Some(x) => Some(f(x))
    case None => None
  }
}

extend monadic<Option> {
  fn bind<A, B>(a: Option<A>, f: fn(A): Option<B>): Option<B> => switch a {
    case Some(x) => f(x)
    case None => None
  }

  fn pure<A>(a: A): Option<A> => Some(a)
}

fn simplify_option<T>(x: Option<Option<T>>): Option<T> {
  return switch x {
    case Some(Some(a)) => Some(a)
    case ? => None
  }
}