native "std:native" {
  add_int(x: int, y: int): int
  sub_int(x: int, y: int): int
  mul_int(x: int, y: int): int
  div_int(x: int, y: int): int
  mod_int(x: int, y: int): int
  float_to_int(x: float): int
  int_to_float(x: int): float
  eq_int(x: int, y: int): bool
  lt_int(x: int, y: int): bool
}

// Native float functions
native "std:native" {
  add_float(x: float, y: float): float
  sub_float(x: float, y: float): float
  mul_float(x: float, y: float): float
  div_float(x: float, y: float): float
  mod_float(x: float, y: float): float
  pow_float(x: float, y: float): float
  eq_float(x: float, y: float): bool
  lt_float(x: float, y: float): bool
}

require "string"
require "bool"

infix 3 ^
infixr 2 !=

extend (c: int) {
  fn (*) (d: int) => mul_int(c, d)
  fn (/) (d: int) => div_int(c, d)
  fn (%) (d: int) => mod_int(c, d)
  fn (-) (d: int) => sub_int(c, d)
  fn (+) (d: int) => add_int(c, d)
  fn (^) (d: int) => switch d {
    case 0 => 1
    case ? => c * (c ^ (d - 1))
  }
  fn negate(): int => 0 - c

  fn (==) (d: int) => eq_int(c, d)
  fn (!=) (d: int) => not (eq_int(c, d))
  fn (<) (d: int) => lt_int(c, d)
  fn (>) (d: int) => lt_int(d, c)
  fn (<=) (d: int) => not (lt_int(d, c))
  fn (>=) (d: int) => not (lt_int(c, d))
  
  fn to_float(): float => int_to_float(c)
  fn show() => to_string(c)
}


// Defining math functions

extend (c: float) {
  fn (*) (d: float) => mul_float(c, d)
  fn (/) (d: float) => div_float(c, d)
  fn (%) (d: float) => mod_float(c, d)
  fn (-) (d: float) => sub_float(c, d)
  fn (+) (d: float) => add_float(c, d)
  fn (^) (d: float) => pow_float(c, d)
  fn negate(): float => 0.0 - c

  fn (==) (d: float) => eq_float(c, d)
  fn (!=) (d: float) => not eq_float(c, d)
  fn (<) (d: float) => lt_float(c, d)
  fn (>) (d: float) => lt_float(d, c)
  fn (<=) (d: float) => not (lt_float(d, c))
  fn (>=) (d: float) => not (lt_float(c, d))

  fn to_int(): int => float_to_int(c)
  fn show() => to_string(c)
}

macro e = 2.718282
fn expf(x: float): float => @e ^ x
fn exp(x: int): float => expf(x.to_float())
