type Result<A, B> {
  Error(A),
  Ok(B)
}

extend<A, B> (this: Result<A, B>) {
  fn map<C>(f: fn(B): C): Result<A, C> =>
    switch this {
      case Error(a) => Error(a)
      case Ok(b) => Ok(f(b))
    }

  fn show(showError: fn(A): str, showOk: fn(B): str): str =>
    switch this {
      case Error(a) => "Error(" + showError(a) + ")"
      case Ok(b) => "Ok(" + showOk(b) + ")"
    }

  fn flat_map<C>(f: fn(B): Result<A, C>): Result<A, C> =>
    switch this {
      case Error(a) => Error(a)
      case Ok(b) => f(b)
    }

  fn or(def: B): B =>
    switch this {
      case Error(?) => def
      case Ok(b) => b
    }

  fn get_or_else(f: fn(A): B): B =>
    switch this {
      case Error(a) => f(a)
      case Ok(b) => b
    }

  fn is_error(): bool =>
    switch this {
      case Error(?) => true
      case Ok(?) => false
    }

  fn is_ok(): bool =>
    switch this {
      case Error(?) => false
      case Ok(?) => true
    }
}
