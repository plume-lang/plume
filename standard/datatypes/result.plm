type Result<A, B> {
  Ok(A),
  Error(B)
}

extend<A extends show, B extends show> show<Result<A, B>> {
  fn show(self: Result<A, B>): str => switch self {
    case Error(a) => "Error(" + a.show() + ")"
    case Ok(b) => "Ok(" + b.show() + ")"
  }
}

extend traversable<Result> {
  fn map<A, B, C>(self: Result<A, B>, f: fn(A): C): Result<C, B> => switch self {
    case Ok(value) => Ok(f(value))
    case Error(err) => Error(err)
  }
}