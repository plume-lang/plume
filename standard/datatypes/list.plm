require "number"
require "tuple"

native "std:native" {
  list_append<A>(x: [A], y: A): [A]
  list_prepend<A>(x: [A], y: A): [A]
  list_concat<A>(x: [A], y: [A]): [A]
  ffi_get_index<A>(x: [A], i: int): Option<A>
  ffi_slice_list<A>(x: [A], start: int, end: int): [A]
}

interface<T> traversable<T> {
  fn map<A, B>(self: T<A>, f: fn(A): B): T<B>
  fn length<A>(self: T<A>): int
}

extend traversable<list> {
  fn map<A, B>(self: list<A>, f: fn(A): B): list<B> => switch self {
    case [] => []
    case [x, ..xs] => xs.map(f).list_append(f(x))
  }

  fn length<A>(self: list<A>): int => switch self {
    case [] => 0
    case [?, ..xs] => 1 + xs.length()
  }
}

fn showListHelper<A extends show>(ls: list<A>): str => switch ls {
  case [] => ""
  case [x] => x.show()
  case [x, ..xs] => x.show() + ", " + showListHelper(xs)
}

extend<A extends show> show<list<A>> {
  fn show(self: list<A>): str => "[" + showListHelper(self) + "]"
}