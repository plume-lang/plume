native "native" "std:native" to_string<A>(x: A): str
native "native" "std:native" {
  copy_ref<A>(x: A): A
  free_ref<A>(x: A): A
}
native "js" "std:native" to_string<A>(x: A): str

interface<A> show<A> {
  fn show_prec(a: A, prec: int): str
}

fn show<A extends show>(a: A): str => a.show_prec(0)

interface<A> boolean_algebra<A> {
  fn and(x: A, y: A): A
  fn or(x: A, y: A): A
  fn not(b: A): A
}

interface<A> to_str<A> {
  fn to_str(a: A): str
}

interface<A> from_str<A> {
  fn from_str(s: str): A
}

interface<A> coercible<A> {
  fn from<B>(b: B): A
  fn to<B>(a: A): B
}

interface<A> equality<A> {
  fn (==)(a: A, b: A): bool
}

interface<A> numeric<A> {
  fn (+)(a: A, b: A): A
  fn (-)(a: A, b: A): A
}

infix 3 ^
interface<A> product<A> {
  fn (*)(a: A, b: A): A
  fn (/)(a: A, b: A): A
  fn (^)(a: A, b: int): A
}

interface<A> ordering<A> {
  fn (<)(a: A, b: A): bool
}

fn (<=)<A extends (ordering, equality, boolean_algebra)>(a: A, b: A): bool => 
  (a < b) or (a == b)

fn (>=)<A extends (ordering, boolean_algebra)>(a: A, b: A): bool =>
  not (a < b)

fn (>)<A extends (ordering, boolean_algebra, equality)>(a: A, b: A): bool =>
  not (a <= b)

interface<T> traversable<T> {
  fn map<A, B>(self: T<A>, f: fn(A): B): T<B>
}

interface<T> foldable<T> {
  fn foldl<A, B>(self: T<A>, f: fn(B, A): B, init: B): B
}

interface<T> indexable<T> {
  fn get_index<A>(self: T<A>, i: int): Option<A>
}

interface<A> default<A> {
  fn default(): A
}

interface<M> monadic<M> {
  fn bind<A, B>(self: M<A>, f: fn(A): M<B>): M<B>
  fn pure<A>(value: A): M<A>
}

infixl 0 >>=
fn (>>=)<M extends monadic, A, B>(x: M<A>, f: fn(A): M<B>): M<B> => 
  x.bind(f)

fn and_then<M extends monadic, A, B>(x: M<A>, y: M<B>): M<B> => 
  x.bind(fn (_) => y)

infixl 1 >>
fn (>>)<M extends monadic, A, B>(x: M<A>, y: M<B>): M<B> => 
  x.and_then(y)

infixl 1 <<
fn (<<)<M extends monadic, A, B>(x: M<A>, y: M<B>): M<A> => 
  x.bind(fn (a) => y.bind(fn(_) => pure(a)))

infixr 0 +=
fn (+=)<A extends numeric>(var: mut A, x: A): A {
  var = *var + x
  return *var
}

infixr 0 -=
fn (-=)<A extends numeric>(var: mut A, x: A): A {
  var = *var - x
  return *var
}

infixr 0 *=
fn (*=)<A extends product>(var: mut A, x: A): A {
  var = *var * x
  return *var
}

infixr 0 /=
fn (/=)<A extends product>(var: mut A, x: A): A {
  var = *var / x
  return *var
}

infixr 0 ^=
